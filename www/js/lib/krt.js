// Generated by CoffeeScript 1.6.3
(function() {
  var ABS, AND, ATN, Add, BOM, Base, Benchmark, BuiltIn, COS, Command, Console, Const, Data, Def, Dim, Div, EQ, EXP, End, Expression, FOR, For, GE, GOSUB, GT, Gosub, Goto, INT, If, Image, Input, LE, LEN, LIN, LOG, LT, Let, Log, MODE_REPL, MODE_RUN, Mat, Mul, NE, NOT, Next, OR, PHASE_EXEC, PHASE_SCAN, Pow, Print, RND, Randomize, Read, Rem, Return, SGN, SIN, SPA, SQR, SUBSTR, Statement, Stop, Sub, TAB, TAN, TIM, Using, V_GENERIC, V_INVALID, V_TSB2K, Var, parse, _bas, _base, _con, _dat, _def, _dim, _dp, _eop, _flatten, _init, _log, _pc, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _stack, _var, _ver, _xrf,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  V_INVALID = -1;

  V_GENERIC = 0;

  V_TSB2K = 1;

  GOSUB = 1;

  FOR = 2;

  PHASE_SCAN = 0;

  PHASE_EXEC = 1;

  MODE_REPL = 0;

  MODE_RUN = 1;

  BOM = 65279;

  _bas = {};

  _base = 0;

  _con = null;

  _dp = 0;

  _dat = [];

  _def = {};

  _eop = false;

  _log = null;

  _pc = 0;

  _stack = [];

  _var = {};

  _ver = V_GENERIC;

  _xrf = {};

  _init = function($all) {
    if ($all) {
      _bas = {};
    }
    _base = 0;
    _dat = [];
    _def = {};
    _dp = 0;
    _eop = false;
    _pc = 0;
    _stack = [];
    _var = {};
    _ver = V_GENERIC;
    return _xrf = {};
  };

  _flatten = function($list) {
    var $a, $item, _i, _len;
    if ($list == null) {
      return [];
    }
    $a = [];
    for (_i = 0, _len = $list.length; _i < _len; _i++) {
      $item = $list[_i];
      if (Array.isArray($item)) {
        $a = $a.concat(_flatten($item));
      } else {
        $a.push($item);
      }
    }
    return $a;
  };

  _dim = function($init, $dim1, $dim2) {
    var $a, $i, $j, _i, _j, _k;
    $a = [];
    switch (arguments.length) {
      case 2:
        for ($i = _i = _base; _base <= $dim1 ? _i < $dim1 : _i > $dim1; $i = _base <= $dim1 ? ++_i : --_i) {
          $a[$i] = $init;
        }
        break;
      case 3:
        for ($i = _j = _base; _base <= $dim1 ? _j < $dim1 : _j > $dim1; $i = _base <= $dim1 ? ++_j : --_j) {
          $a[$i] = [];
          for ($j = _k = _base; _base <= $dim2 ? _k < $dim2 : _k > $dim2; $j = _base <= $dim2 ? ++_k : --_k) {
            $a[$i][$j] = $init;
          }
        }
    }
    return $a;
  };

  Log = (function() {
    Log.prototype.element = '';

    function Log(element) {
      this.element = element;
      this.console = $(this.element);
    }

    Log.prototype.error = function($text) {
      var $detail, $dif, $err, $lineno, $match, $msg, $ofs, $title, _ref;
      _ref = $text.split("\n"), $title = _ref[0], $msg = _ref[1], $ofs = _ref[2], $err = _ref[3];
      $detail = [$msg, $ofs, '', $err, ''].join("\n");
      if (($match = /\D*([0-9]+)\s/.exec($msg)) != null) {
        $dif = $match[0].length - $match[1].length - 1;
        $msg = $msg.slice($dif);
        $ofs = $ofs.slice($dif);
        $msg = $msg.slice(0, +$ofs.length + 1 || 9e9) + '...';
        $detail = [$msg, $ofs, '', $err, ''].join('\n');
        $lineno = $match[1];
        if (($match = /\D*line ([0-9]+):$/.exec($title)) != null) {
          $title = $title.replace($match[1], $lineno);
        }
      }
      this.console.append("<div class=\"alert alert-error\">\n<span class=\"label label-info\">\n<i class=\"icon-exclamation-sign icon-white\"></i>" + $title + "\n</span>\n<pre class=\"text-info\">" + $detail + "\n</pre>\n</div>");
      return $('.tab-pane-log').tab('show');
    };

    return Log;

  })();

  Console = (function() {
    Console.prototype.mode = MODE_REPL;

    Console.prototype.element = '';

    Console.prototype.console = null;

    Console.prototype.buffer = null;

    Console.prototype.vars = null;

    Console.prototype.animateScroll = true;

    Console.prototype.autofocus = true;

    Console.prototype.promptLabel = '';

    Console.prototype.promptHistory = true;

    Console.prototype.welcomeMessage = '';

    function Console(element, $prompt) {
      this.element = element;
      if ($prompt == null) {
        $prompt = '> ';
      }
      this.commandHandle = __bind(this.commandHandle, this);
      this.commandValidate = __bind(this.commandValidate, this);
      this.promptLabel = $prompt;
      this.clear();
    }

    Console.prototype.commandValidate = function($line) {
      if ($line === "") {
        return false;
      } else {
        return true;
      }
    };

    Console.prototype.commandHandle = function($line, $report) {
      var $e, $item, $ix, $name, _i, _j, _len, _len1, _ref, _ref1;
      switch (this.mode) {
        case MODE_RUN:
          _ref = $line.split(",");
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            $item = _ref[_i];
            this.buffer.push($item);
          }
          if (this.buffer.length < this.vars.length) {
            this.continuedPrompt = true;
          } else {
            _ref1 = this.vars;
            for ($ix = _j = 0, _len1 = _ref1.length; _j < _len1; $ix = ++_j) {
              $name = _ref1[$ix];
              _var[$name] = this.buffer[$ix];
            }
            this.continuedPrompt = false;
            krt.run(false);
            return true;
          }
          break;
        case MODE_REPL:
          try {
            return parse($line);
          } catch (_error) {
            $e = _error;
            return $e.toString();
          }
      }
    };

    Console.prototype.input = function($prompt, $vars) {
      if ($prompt != null) {
        this.print($prompt);
      }
      this.buffer = [];
      this.vars = $vars;
      return true;
    };

    Console.prototype.print = function($text) {
      return this.console.inner.append($text.replace(/\ /g, "&nbsp;"));
    };

    Console.prototype.println = function($text) {
      return this.console.inner.append($text.replace(/\ /g, "&nbsp;") + "<br />");
    };

    Console.prototype.clear = function() {
      $(this.element).html('');
      return this.console = $(this.element).console(this);
    };

    return Console;

  })();

  Benchmark = (function() {
    Benchmark.prototype.marker = null;

    function Benchmark() {
      Object.defineProperties(this, {
        marker: {
          enumerable: true,
          writeable: false,
          value: {}
        }
      });
    }

    Benchmark.prototype.mark = function($name) {
      return this.marker[$name] = new Date();
    };

    Benchmark.prototype.elapsedTime = function($point1, $point2) {
      if (this.marker[$point1] == null) {
        return 0;
      }
      if (this.marker[$point2] == null) {
        this.marker[$point2] = new Date();
      }
      return this.marker[$point2] - this.marker[$point1];
    };

    return Benchmark;

  })();

  Expression = (function() {
    function Expression(lhs, rhs) {
      this.lhs = lhs;
      this.rhs = rhs;
    }

    return Expression;

  })();

  BuiltIn = (function() {
    function BuiltIn($0, $1, $2) {
      this.$0 = $0;
      this.$1 = $1;
      this.$2 = $2;
    }

    BuiltIn.prototype.toString = function() {
      return "" + (this.constructor.name.toUpperCase()) + "(" + this.$0 + ")";
    };

    return BuiltIn;

  })();

  Command = (function() {
    function Command() {}

    Command.prototype.type = PHASE_EXEC;

    Command.prototype["eval"] = function() {};

    return Command;

  })();

  window.krt = {
    repl: function($console, $log) {
      _con = new Console($console);
      return _log = new Log($log);
    },
    parse: function($code) {
      var $e;
      if ($code != null) {
        try {
          return parse($code.slice(0, -1));
        } catch (_error) {
          $e = _error;
          return _log.error($e.message);
        }
      }
    },
    cls: function() {
      return _con.clear();
    },
    del: function($start, $end) {
      var $lineno, _i, _results;
      if ($end == null) {
        $end = $start;
      }
      _results = [];
      for ($lineno = _i = $start; $start <= $end ? _i < $end : _i > $end; $lineno = $start <= $end ? ++_i : --_i) {
        if (_bas[$lineno] != null) {
          _results.push(delete _bas[$lineno]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    get: function($file) {
      var $text;
      _init(true);
      $text = localStorage[$file.slice(1, -1)] || '';
      return parse($text);
    },
    purge: function($file) {
      if (localStorage[$file.slice(1, -1)] != null) {
        return delete localStorage[$file.slice(1, -1)];
      }
    },
    list: function($start, $end) {
      var $code, $lineno, $lines, $statement, _i, _len, _ref, _results;
      if ($end == null) {
        $end = $start;
      }
      $lines = [];
      for ($lineno in _bas) {
        $statement = _bas[$lineno];
        while ($lineno.length < 5) {
          $lineno = '0' + $lineno;
        }
        $lines.push([$lineno, $statement]);
      }
      $lines.sort();
      _results = [];
      for (_i = 0, _len = $lines.length; _i < _len; _i++) {
        _ref = $lines[_i], $lineno = _ref[0], $statement = _ref[1];
        $lineno = $statement.lineno;
        $code = $statement.code;
        if ($start != null) {
          if ($lineno >= $start && $lineno <= $end) {
            _results.push(_con.println($lineno + ' ' + $code));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(_con.println($lineno + ' ' + $code));
        }
      }
      return _results;
    },
    run: function($wait) {
      var $code, $e, $lineno, $lines, $statement;
      if ($wait == null) {
        _init(false);
        _con.mode = MODE_RUN;
      }
      $wait = false;
      $lines = [];
      for ($lineno in _bas) {
        $statement = _bas[$lineno];
        _xrf[$lineno] = $lines.length;
        $lines.push($statement);
        if ($statement.code.type === PHASE_SCAN) {
          $statement.code["eval"]();
        }
      }
      $lines.sort();
      try {
        while (!(_eop || $wait)) {
          $code = $lines[_pc++].code;
          if ($code.type === PHASE_EXEC) {
            $wait = $code["eval"]();
          }
          if (_pc >= $lines.length) {
            _eop = true;
          }
        }
      } catch (_error) {
        $e = _error;
        _con.println($e);
        $wait = false;
      }
      if (!$wait) {
        _con.mode = MODE_REPL;
        return _con.println('DONE');
      }
    },
    save: function($file) {
      var $code, $lineno, $lines, $statement, $text, _i, _len, _ref;
      $lines = [];
      $text = '';
      for ($lineno in _bas) {
        $statement = _bas[$lineno];
        $lines.push([$lineno, $statement.code]);
      }
      $lines.sort();
      for (_i = 0, _len = $lines.length; _i < _len; _i++) {
        _ref = $lines[_i], $lineno = _ref[0], $code = _ref[1];
        $text += $lineno + ' ' + $code + '\n';
      }
      return localStorage[$file.slice(1, -1)] = $text.slice(0, -1);
    },
    scr: function() {
      _init(true);
      return _con.clear();
    },
    compile: function() {
      var $code, $lineno, $src;
      $src = [];
      for ($lineno in _bas) {
        $code = _bas[$lineno];
        $src.push($code.compile());
      }
      return $src.join('\n');
    },
    Statement: Statement = (function() {
      function Statement($lineno, $code) {
        var _ref;
        if ($code != null) {
          if ($lineno > 0) {
            this.lineno = $lineno;
            this.code = $code;
            _bas[this.lineno] = this;
          }
        } else {
          _ref = [null, $lineno], $lineno = _ref[0], $code = _ref[1];
          if ($code != null) {
            if (typeof $code["eval"] === "function") {
              $code["eval"]();
            }
          }
        }
      }

      return Statement;

    })(),
    Zer: {
      "eval": function() {
        return 0;
      },
      toString: function() {
        return 'ZER';
      }
    },
    Con: {
      "eval": function() {
        return 1;
      },
      toString: function() {
        return 'CON';
      }
    },
    Semic: {
      "eval": function() {
        return '&nbsp;&nbsp;&nbsp;&nbsp;';
      },
      toString: function() {
        return ';';
      }
    },
    Comma: {
      "eval": function() {
        return '&nbsp;';
      },
      toString: function() {
        return ',';
      }
    },
    NullSep: {
      "eval": function() {
        return '';
      },
      toString: function() {
        return '';
      }
    },
    Const: Const = (function() {
      function Const(value) {
        this.value = value;
        this.is_string = 'string' === typeof this.value ? true : false;
        if (this.is_string) {
          if (this.value.charAt(0) === '"') {
            this.value = this.value.slice(1, -1);
          }
        }
      }

      Const.prototype.value = function() {
        return this.value;
      };

      Const.prototype["eval"] = function() {
        return this.value;
      };

      Const.prototype.toString = function() {
        if (this.is_string) {
          return "\"" + this.value + "\"";
        } else {
          return "" + this.value;
        }
      };

      return Const;

    })(),
    Var: Var = (function() {
      function Var(name, $delim, $dims) {
        this.name = name;
        if ($delim != null) {
          _ver = (function() {
            switch ($delim) {
              case '(':
                return V_GENERIC;
              case '[':
                return V_TSB2K;
              default:
                return V_INVALID;
            }
          })();
          this.is_array = true;
          this.dims = _flatten($dims);
          this.dim1 = this.dims[0];
          this.dim2 = this.dims[1];
        } else {
          this.is_array = false;
        }
      }

      Var.prototype["let"] = function($value) {
        if (this.dim2 != null) {
          return _var[this.name][this.dim1][this.dim2] = $value;
        } else if (this.dim1 != null) {
          return _var[this.name][this.dim1] = $value;
        } else {
          return _var[this.name] = $value;
        }
      };

      Var.prototype["eval"] = function() {
        if (this.dim2 != null) {
          return _var[this.name][this.dim1][this.dim2];
        } else if (this.dim1 != null) {
          return _var[this.name][this.dim1];
        } else {
          return _var[this.name];
        }
      };

      Var.prototype.toString = function() {
        if (this.is_array) {
          return "" + this.name + "[" + (this.dims.join(',')) + "]";
        } else {
          return this.name;
        }
      };

      return Var;

    })(),
    Base: Base = (function(_super) {
      __extends(Base, _super);

      function Base(base) {
        this.base = base;
      }

      Base.prototype["eval"] = function() {
        _base = this.base;
        return false;
      };

      Base.prototype.toString = function() {
        return "BASE " + this.base;
      };

      return Base;

    })(Command),
    Data: Data = (function(_super) {
      __extends(Data, _super);

      Data.prototype.type = PHASE_SCAN;

      function Data(data) {
        this.data = data;
      }

      Data.prototype["eval"] = function() {
        if (_dat === null) {
          _dat = [];
        }
        _dat = _dat.concat(this.data);
        return false;
      };

      Data.prototype.toString = function() {
        return "DATA " + (this.data.join(', '));
      };

      return Data;

    })(Command),
    Def: Def = (function(_super) {
      __extends(Def, _super);

      Def.prototype.type = PHASE_SCAN;

      function Def(name, par, body) {
        this.name = name;
        this.par = par;
        this.body = body;
      }

      Def.prototype["eval"] = function() {
        if (_def === null) {
          _def = {};
        }
        _def[this.name] = Function(this.par, this.body);
        return false;
      };

      Def.prototype.toString = function() {
        return "DEF FN" + this.name + "(" + this.par + ") = " + this.body;
      };

      return Def;

    })(Command),
    Dim: Dim = (function(_super) {
      __extends(Dim, _super);

      Dim.prototype.type = PHASE_SCAN;

      function Dim(vars) {
        this.vars = vars;
      }

      Dim.prototype["eval"] = function() {
        var $var, _i, _len, _ref;
        _ref = this.vars;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          $var = _ref[_i];
          _var[$var.name] = _dim.apply(null, [0].concat(__slice.call($var.dims)));
        }
        return false;
      };

      Dim.prototype.toString = function() {
        return "DIM " + (this.vars.join(', '));
      };

      return Dim;

    })(Command),
    End: End = (function(_super) {
      __extends(End, _super);

      function End() {
        _ref = End.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      End.prototype["eval"] = function() {
        return _eop = false;
      };

      End.prototype.toString = function() {
        return "END";
      };

      return End;

    })(Command),
    For: For = (function(_super) {
      __extends(For, _super);

      function For(_var1, start, end, step) {
        this["var"] = _var1;
        this.start = start;
        this.end = end;
        this.step = step != null ? step : 1;
      }

      For.prototype["eval"] = function() {
        _var[this["var"]] = this.start["eval"]();
        _stack.push({
          id: FOR,
          pc: _pc,
          name: this["var"],
          end: this.end["eval"](),
          step: this.step["eval"]()
        });
        return false;
      };

      For.prototype.toString = function() {
        if (this.step === 1) {
          return "FOR " + this["var"] + " = " + this.start + " TO " + this.end;
        } else {
          return "FOR " + this["var"] + " = " + this.start + " TO " + this.end + " STEP " + this.step;
        }
      };

      return For;

    })(Command),
    Goto: Goto = (function(_super) {
      __extends(Goto, _super);

      function Goto(lineno, of) {
        this.lineno = lineno;
        this.of = of;
      }

      Goto.prototype["eval"] = function() {
        _pc = _xrf[this.lineno];
        return false;
      };

      Goto.prototype.toString = function() {
        if (this.of != null) {
          return "GOTO " + this.lineno + " OF " + (this.of.join(','));
        } else {
          return "GOTO " + this.lineno;
        }
      };

      return Goto;

    })(Command),
    Gosub: Gosub = (function(_super) {
      __extends(Gosub, _super);

      function Gosub(lineno) {
        this.lineno = lineno;
      }

      Gosub.prototype["eval"] = function() {
        _stack.push({
          id: GOSUB,
          pc: _pc
        });
        _pc = _xrf[this.lineno];
        return false;
      };

      Gosub.prototype.toString = function() {
        return "GOSUB " + this.lineno;
      };

      return Gosub;

    })(Command),
    If: If = (function(_super) {
      __extends(If, _super);

      function If(cond, lineno) {
        this.cond = cond;
        this.lineno = lineno;
      }

      If.prototype["eval"] = function() {
        if (this.cond["eval"]()) {
          _pc = _xrf[this.lineno];
        }
        return false;
      };

      If.prototype.toString = function() {
        return "IF " + this.cond + " THEN " + this.lineno;
      };

      return If;

    })(Command),
    Image: Image = (function(_super) {
      __extends(Image, _super);

      function Image($list) {
        if ($list == null) {
          $list = [];
        }
        this.list = _flatten($list);
      }

      Image.prototype["eval"] = function() {
        return false;
      };

      Image.prototype.toString = function() {
        return "IMAGE " + (this.list.join(''));
      };

      return Image;

    })(Command),
    Input: Input = (function(_super) {
      __extends(Input, _super);

      function Input($vars, prompt) {
        this.prompt = prompt;
        this.vars = _flatten($vars);
      }

      Input.prototype["eval"] = function() {
        return _con.input(this.prompt, this.vars);
      };

      Input.prototype.toString = function() {
        if (this.prompt != null) {
          return "INPUT " + this.prompt + ", " + (this.vars.join(','));
        } else {
          return "INPUT " + (this.vars.join(','));
        }
      };

      return Input;

    })(Command),
    Let: Let = (function(_super) {
      __extends(Let, _super);

      function Let($vars, value) {
        var $var, _i, _len, _ref1;
        this.value = value;
        this.vars = [];
        _ref1 = _flatten($vars);
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          $var = _ref1[_i];
          if ('string' === typeof $var) {
            this.vars.push(new Var($var));
          } else {
            this.vars.push($var);
          }
        }
      }

      Let.prototype["eval"] = function() {
        var $value, $var, _i, _len, _ref1;
        $value = this.value["eval"]();
        _ref1 = this.vars;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          $var = _ref1[_i];
          $var["let"]($value);
        }
        return false;
      };

      Let.prototype.toString = function() {
        var $s, $var, _i, _len, _ref1;
        $s = '';
        _ref1 = this.vars;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          $var = _ref1[_i];
          $s += $var + ' = ';
        }
        return "LET " + $s + this.value;
      };

      return Let;

    })(Command),
    Mat: Mat = (function(_super) {
      __extends(Mat, _super);

      function Mat(_var1, value) {
        this["var"] = _var1;
        this.value = value;
      }

      Mat.prototype["eval"] = function() {
        var $i, $j, $value;
        $value = this.value["eval"]();
        if (_var[this["var"]] != null) {
          $i = $a.length;
          $j = $a[_base].length;
        } else {
          $i = $j = 9;
        }
        _var[this["var"]] = _dim($value, $i, $j);
        return false;
      };

      Mat.prototype.toString = function() {
        return "MAT " + this["var"] + " = " + this.value;
      };

      return Mat;

    })(Command),
    Next: Next = (function(_super) {
      __extends(Next, _super);

      function Next(_var1) {
        this["var"] = _var1;
      }

      Next.prototype["eval"] = function() {
        return false;
      };

      Next.prototype.toString = function() {
        return "NEXT " + this["var"];
      };

      return Next;

    })(Command),
    Print: Print = (function(_super) {
      __extends(Print, _super);

      function Print($items) {
        this.items = _flatten($items);
      }

      Print.prototype["eval"] = function() {
        var $item, $str, _i, _len, _ref1;
        $str = '';
        _ref1 = this.items;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          $item = _ref1[_i];
          $str += $item["eval"]();
        }
        _con.println($str);
        return false;
      };

      Print.prototype.toString = function() {
        var $item, $str, _i, _len, _ref1;
        $str = '';
        _ref1 = this.items;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          $item = _ref1[_i];
          $str += $item.toString();
        }
        return "PRINT " + $str;
      };

      return Print;

    })(Command),
    Using: Using = (function(_super) {
      __extends(Using, _super);

      function Using(lineno, items) {
        this.lineno = lineno;
        this.items = items != null ? items : [];
      }

      Using.prototype["eval"] = function() {
        return false;
      };

      Using.prototype.toString = function() {
        var $item, $str, _i, _len, _ref1;
        if (this.items.length === 0) {
          return "PRINT USING " + this.lineno;
        } else {
          $str = '';
          _ref1 = this.items;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            $item = _ref1[_i];
            $str += $item.toString() + ',';
          }
          $str = $str.slice(0, -1);
          return "PRINT USING " + this.lineno + ";" + $str;
        }
      };

      return Using;

    })(Command),
    Randomize: Randomize = (function(_super) {
      __extends(Randomize, _super);

      function Randomize() {}

      Randomize.prototype["eval"] = function() {
        return false;
      };

      Randomize.prototype.toString = function() {
        return "RANDOMIZE";
      };

      return Randomize;

    })(Command),
    Read: Read = (function(_super) {
      __extends(Read, _super);

      function Read(vars) {
        this.vars = vars;
      }

      Read.prototype["eval"] = function() {
        return false;
      };

      Read.prototype.toString = function() {
        return "READ " + (this.vars.join(','));
      };

      return Read;

    })(Command),
    Return: Return = (function(_super) {
      __extends(Return, _super);

      function Return() {}

      Return.prototype["eval"] = function() {
        return false;
      };

      Return.prototype.toString = function() {
        return "RETURN";
      };

      return Return;

    })(Command),
    Rem: Rem = (function(_super) {
      __extends(Rem, _super);

      function Rem(text) {
        this.text = text;
      }

      Rem.prototype["eval"] = function() {
        return false;
      };

      Rem.prototype.toString = function() {
        return "" + this.text;
      };

      return Rem;

    })(Command),
    Stop: Stop = (function(_super) {
      __extends(Stop, _super);

      function Stop() {}

      Stop.prototype["eval"] = function() {
        return false;
      };

      Stop.prototype.toString = function() {
        return "STOP";
      };

      return Stop;

    })(Command),
    Add: Add = (function(_super) {
      __extends(Add, _super);

      function Add() {
        _ref1 = Add.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      Add.prototype["eval"] = function() {
        return this.lhs["eval"]() + this.rhs["eval"]();
      };

      Add.prototype.toString = function() {
        return "" + this.lhs + " + " + this.rhs;
      };

      return Add;

    })(Expression),
    Sub: Sub = (function(_super) {
      __extends(Sub, _super);

      function Sub() {
        _ref2 = Sub.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      Sub.prototype["eval"] = function() {
        return this.lhs["eval"]() - this.rhs["eval"]();
      };

      Sub.prototype.toString = function() {
        return "" + this.lhs + " - " + this.rhs;
      };

      return Sub;

    })(Expression),
    Mul: Mul = (function(_super) {
      __extends(Mul, _super);

      function Mul() {
        _ref3 = Mul.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      Mul.prototype["eval"] = function() {
        return this.lhs["eval"]() * this.rhs["eval"]();
      };

      Mul.prototype.toString = function() {
        return "" + this.lhs + " * " + this.rhs;
      };

      return Mul;

    })(Expression),
    Div: Div = (function(_super) {
      __extends(Div, _super);

      function Div() {
        _ref4 = Div.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      Div.prototype["eval"] = function() {
        return this.lhs["eval"]() / this.rhs["eval"]();
      };

      Div.prototype.toString = function() {
        return "" + this.lhs + " / " + this.rhs;
      };

      return Div;

    })(Expression),
    Pow: Pow = (function(_super) {
      __extends(Pow, _super);

      function Pow() {
        _ref5 = Pow.__super__.constructor.apply(this, arguments);
        return _ref5;
      }

      Pow.prototype["eval"] = function() {
        return Math.pow(this.lhs["eval"](), this.rhs["eval"]());
      };

      Pow.prototype.toString = function() {
        return "" + this.lhs + " ^ " + this.rhs;
      };

      return Pow;

    })(Expression),
    OR: OR = (function(_super) {
      __extends(OR, _super);

      function OR() {
        _ref6 = OR.__super__.constructor.apply(this, arguments);
        return _ref6;
      }

      OR.prototype["eval"] = function() {
        return this.lhs["eval"]() || this.rhs["eval"]();
      };

      OR.prototype.toString = function() {
        return "" + this.lhs + " OR " + this.rhs;
      };

      return OR;

    })(Expression),
    AND: AND = (function(_super) {
      __extends(AND, _super);

      function AND() {
        _ref7 = AND.__super__.constructor.apply(this, arguments);
        return _ref7;
      }

      AND.prototype["eval"] = function() {
        return this.lhs["eval"]() && this.rhs["eval"]();
      };

      AND.prototype.toString = function() {
        return "" + this.lhs + " AND " + this.rhs;
      };

      return AND;

    })(Expression),
    NOT: NOT = (function(_super) {
      __extends(NOT, _super);

      function NOT() {
        _ref8 = NOT.__super__.constructor.apply(this, arguments);
        return _ref8;
      }

      NOT.prototype["eval"] = function() {
        return !this.lhs["eval"]();
      };

      NOT.prototype.toString = function() {
        return "NOT " + this.lhs;
      };

      return NOT;

    })(Expression),
    LT: LT = (function(_super) {
      __extends(LT, _super);

      function LT() {
        _ref9 = LT.__super__.constructor.apply(this, arguments);
        return _ref9;
      }

      LT.prototype["eval"] = function() {
        return this.lhs["eval"]() < this.rhs["eval"]();
      };

      LT.prototype.toString = function() {
        return "" + this.lhs + " < " + this.rhs;
      };

      return LT;

    })(Expression),
    GT: GT = (function(_super) {
      __extends(GT, _super);

      function GT() {
        _ref10 = GT.__super__.constructor.apply(this, arguments);
        return _ref10;
      }

      GT.prototype["eval"] = function() {
        return this.lhs["eval"]() > this.rhs["eval"]();
      };

      GT.prototype.toString = function() {
        return "" + this.lhs + " > " + this.rhs;
      };

      return GT;

    })(Expression),
    LE: LE = (function(_super) {
      __extends(LE, _super);

      function LE() {
        _ref11 = LE.__super__.constructor.apply(this, arguments);
        return _ref11;
      }

      LE.prototype["eval"] = function() {
        return this.lhs["eval"]() <= this.rhs["eval"]();
      };

      LE.prototype.toString = function() {
        return "" + this.lhs + " <= " + this.rhs;
      };

      return LE;

    })(Expression),
    GE: GE = (function(_super) {
      __extends(GE, _super);

      function GE() {
        _ref12 = GE.__super__.constructor.apply(this, arguments);
        return _ref12;
      }

      GE.prototype["eval"] = function() {
        return this.lhs["eval"]() >= this.rhs["eval"]();
      };

      GE.prototype.toString = function() {
        return "" + this.lhs + " >= " + this.rhs;
      };

      return GE;

    })(Expression),
    EQ: EQ = (function(_super) {
      __extends(EQ, _super);

      function EQ() {
        _ref13 = EQ.__super__.constructor.apply(this, arguments);
        return _ref13;
      }

      EQ.prototype["eval"] = function() {
        if (this.lhs["eval"]() === this.rhs["eval"]()) {
          return true;
        } else {
          return false;
        }
      };

      EQ.prototype.toString = function() {
        return "" + this.lhs + " = " + this.rhs;
      };

      return EQ;

    })(Expression),
    NE: NE = (function(_super) {
      __extends(NE, _super);

      function NE() {
        _ref14 = NE.__super__.constructor.apply(this, arguments);
        return _ref14;
      }

      NE.prototype["eval"] = function() {
        if (this.lhs["eval"]() !== this.rhs["eval"]()) {
          return true;
        } else {
          return false;
        }
      };

      NE.prototype.toString = function() {
        return "" + this.lhs + " <> " + this.rhs;
      };

      return NE;

    })(Expression),
    ABS: ABS = (function(_super) {
      __extends(ABS, _super);

      function ABS() {
        _ref15 = ABS.__super__.constructor.apply(this, arguments);
        return _ref15;
      }

      ABS.prototype["eval"] = function() {
        return Math.abs(this.$0["eval"]());
      };

      return ABS;

    })(BuiltIn),
    ATN: ATN = (function(_super) {
      __extends(ATN, _super);

      function ATN() {
        _ref16 = ATN.__super__.constructor.apply(this, arguments);
        return _ref16;
      }

      ATN.prototype["eval"] = function() {
        return Math.atn(this.$0["eval"]());
      };

      return ATN;

    })(BuiltIn),
    COS: COS = (function(_super) {
      __extends(COS, _super);

      function COS() {
        _ref17 = COS.__super__.constructor.apply(this, arguments);
        return _ref17;
      }

      COS.prototype["eval"] = function() {
        return Math.cos(this.$0["eval"]());
      };

      return COS;

    })(BuiltIn),
    EXP: EXP = (function(_super) {
      __extends(EXP, _super);

      function EXP() {
        _ref18 = EXP.__super__.constructor.apply(this, arguments);
        return _ref18;
      }

      EXP.prototype["eval"] = function() {
        return Math.exp(this.$0["eval"]());
      };

      return EXP;

    })(BuiltIn),
    INT: INT = (function(_super) {
      __extends(INT, _super);

      function INT() {
        _ref19 = INT.__super__.constructor.apply(this, arguments);
        return _ref19;
      }

      INT.prototype["eval"] = function() {
        return Math.floor(this.$0["eval"]());
      };

      return INT;

    })(BuiltIn),
    LEN: LEN = (function(_super) {
      __extends(LEN, _super);

      function LEN() {
        _ref20 = LEN.__super__.constructor.apply(this, arguments);
        return _ref20;
      }

      LEN.prototype["eval"] = function() {
        return this.$0.length;
      };

      return LEN;

    })(BuiltIn),
    LIN: LIN = (function(_super) {
      __extends(LIN, _super);

      function LIN() {
        _ref21 = LIN.__super__.constructor.apply(this, arguments);
        return _ref21;
      }

      LIN.prototype["eval"] = function() {
        return '\n';
      };

      return LIN;

    })(BuiltIn),
    LOG: LOG = (function(_super) {
      __extends(LOG, _super);

      function LOG() {
        _ref22 = LOG.__super__.constructor.apply(this, arguments);
        return _ref22;
      }

      LOG.prototype["eval"] = function() {
        return Math.log(this.$0["eval"]());
      };

      return LOG;

    })(BuiltIn),
    RND: RND = (function(_super) {
      __extends(RND, _super);

      function RND() {
        _ref23 = RND.__super__.constructor.apply(this, arguments);
        return _ref23;
      }

      RND.prototype["eval"] = function() {
        return Math.random(this.$0["eval"]());
      };

      return RND;

    })(BuiltIn),
    SGN: SGN = (function(_super) {
      __extends(SGN, _super);

      function SGN() {
        _ref24 = SGN.__super__.constructor.apply(this, arguments);
        return _ref24;
      }

      SGN.prototype["eval"] = function() {
        var $0;
        $0 = this.$0["eval"];
        if ($0 < 0) {
          return -1;
        } else if ($0 > 0) {
          return 1;
        } else {
          return 0;
        }
      };

      return SGN;

    })(BuiltIn),
    SIN: SIN = (function(_super) {
      __extends(SIN, _super);

      function SIN() {
        _ref25 = SIN.__super__.constructor.apply(this, arguments);
        return _ref25;
      }

      SIN.prototype["eval"] = function() {
        return Math.sun(this.$0["eval"]());
      };

      return SIN;

    })(BuiltIn),
    SPA: SPA = (function(_super) {
      __extends(SPA, _super);

      function SPA() {
        _ref26 = SPA.__super__.constructor.apply(this, arguments);
        return _ref26;
      }

      SPA.prototype["eval"] = function() {
        return Array(this.$0["eval"]()).join(" ");
      };

      return SPA;

    })(BuiltIn),
    SQR: SQR = (function(_super) {
      __extends(SQR, _super);

      function SQR() {
        _ref27 = SQR.__super__.constructor.apply(this, arguments);
        return _ref27;
      }

      SQR.prototype["eval"] = function() {
        return Math.sqrt(this.$0["eval"]());
      };

      return SQR;

    })(BuiltIn),
    SUBSTR: SUBSTR = (function(_super) {
      __extends(SUBSTR, _super);

      function SUBSTR() {
        _ref28 = SUBSTR.__super__.constructor.apply(this, arguments);
        return _ref28;
      }

      SUBSTR.prototype["eval"] = function() {
        return this.$0["eval"]().substr(this.$1["eval"](), this.$2["eval"]());
      };

      SUBSTR.prototype.toString = function() {
        return "SUBSTR(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
      };

      return SUBSTR;

    })(BuiltIn),
    TAB: TAB = (function(_super) {
      __extends(TAB, _super);

      function TAB() {
        _ref29 = TAB.__super__.constructor.apply(this, arguments);
        return _ref29;
      }

      TAB.prototype["eval"] = function() {
        return Array(this.$0["eval"]()).join("    ");
      };

      return TAB;

    })(BuiltIn),
    TAN: TAN = (function(_super) {
      __extends(TAN, _super);

      function TAN() {
        _ref30 = TAN.__super__.constructor.apply(this, arguments);
        return _ref30;
      }

      TAN.prototype["eval"] = function() {
        return Math.tan(this.$0["eval"]());
      };

      return TAN;

    })(BuiltIn),
    TIM: TIM = (function(_super) {
      __extends(TIM, _super);

      function TIM() {
        _ref31 = TIM.__super__.constructor.apply(this, arguments);
        return _ref31;
      }

      TIM.prototype["eval"] = function() {
        if (this.$0["eval"]() === 0) {
          return (new Date()).getMinutes();
        } else {
          return (new Date()).getSeconds();
        }
      };

      return TIM;

    })(BuiltIn)
  };

  parse = function($code) {
    var $index, $line, _i, _len;
    if ($code.charCodeAt(0) === BOM) {
      $code = $code.slice(1);
    }
    $code = $code.replace(/\r/g, '').split('\n');
    for ($index = _i = 0, _len = $code.length; _i < _len; $index = ++_i) {
      $line = $code[$index];
      if (/\d+\s+IF\s/.test($line) || /^\s*IF\s/.test($line)) {
        $code[$index] = $line.replace(/\=/g, '==').replace(/\<\=\=/g, '<=').replace(/\>\=\=/g, '>=');
      }
      if (/\d+\s+PRINT\s/.test($line) || /^\s*PRINT\s/.test($line)) {
        $code[$index] = $line.replace(/(\"[^"]*\")([^;,])/g, "$1:$2").replace(/([^;,])(\"[^"]*\")/g, "$1:$2").replace(/(PRINT\s+)\:/, "$1");
      }
    }
    return kc.parse($code.join('\n'));
  };

}).call(this);
