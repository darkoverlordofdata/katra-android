// Generated by CoffeeScript 1.6.3
var ABS, AND, ATN, Add, BOM, Base, BuiltIn, COS, Console, Const, Data, Def, Dim, Div, EQ, EXP, End, FN, FOR, For, GE, GOSUB, GT, Gosub, Goto, INT, If, Image, Input, Keyword, LE, LEN, LIN, LOG, LT, Let, MODE_REPL, MODE_RUN, Mat, Mul, NE, NOT, Next, OR, Operator, PHASE_EXEC, PHASE_SCAN, PRINTF, Pow, Print, RND, Randomize, Read, Rem, Restore, Return, SGN, SIN, SPA, SQR, SUBSTR, Statement, Stop, Sub, TAB, TAN, TIM, Using, Var, katra, rte, _con, _dat, _dbg, _dim, _dp, _elapsed_time, _eop, _eval, _flatten, _fn, _format, _fs, _init, _lin, _mark, _mrk, _ofs, _pad, _pc, _prg, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref28, _ref29, _ref3, _ref30, _ref31, _ref32, _ref33, _ref34, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _sprintf, _stk, _use, _var, _xrf,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

rte = typeof window !== "undefined" && window !== null ? window.rte : require("./rte.node");

GOSUB = 1;

FOR = 2;

PHASE_SCAN = 0;

PHASE_EXEC = 1;

MODE_REPL = 0;

MODE_RUN = 1;

BOM = 65279;

PRINTF = /(\%)([-])?([+])?([0])?(\d*)?(\.\d*)?([\%ds])/g;

_con = null;

_dat = [];

_dbg = false;

_dp = 0;

_eop = false;

_fn = {};

_fs = null;

_lin = [];

_mrk = {};

_ofs = 0;

_pc = 0;

_prg = {};

_stk = [];

_use = 'bnf';

_var = {};

_xrf = {};

if (typeof process !== "undefined" && process !== null) {
  _use = (_ref = process.argv[2]) != null ? _ref : _use;
}

_init = function($all) {
  _dat = [];
  _dp = 0;
  _eop = false;
  _fn = {};
  _mrk = {};
  _ofs = 0;
  _pc = 0;
  if ($all) {
    _prg = {};
  }
  _stk = [];
  _var = {};
  return _xrf = {};
};

_dim = function($init, $dim1, $dim2) {
  var $a, $i, $j, _i, _j, _k, _ref1, _ref2, _ref3;
  $a = [];
  switch (arguments.length) {
    case 2:
      for ($i = _i = _ofs, _ref1 = $dim1 + 1; _ofs <= _ref1 ? _i < _ref1 : _i > _ref1; $i = _ofs <= _ref1 ? ++_i : --_i) {
        $a[$i] = $init;
      }
      break;
    case 3:
      for ($i = _j = _ofs, _ref2 = $dim1 + 1; _ofs <= _ref2 ? _j < _ref2 : _j > _ref2; $i = _ofs <= _ref2 ? ++_j : --_j) {
        $a[$i] = [];
        for ($j = _k = _ofs, _ref3 = $dim2 + 1; _ofs <= _ref3 ? _k < _ref3 : _k > _ref3; $j = _ofs <= _ref3 ? ++_k : --_k) {
          $a[$i][$j] = $init;
        }
      }
  }
  return $a;
};

_eval = function($node) {
  if ($node["eval"] != null) {
    return $node["eval"]();
  } else if ($node.op != null) {
    switch ($node.op) {
      case '+':
        return _eval($node.left) + _eval($node.right);
      case '-':
        return _eval($node.left) - _eval($node.right);
      case '*':
        return _eval($node.left) * _eval($node.right);
      case '/':
        return _eval($node.left) / _eval($node.right);
      case '^':
        return Math.pow(_eval($node.left), _eval($node.right));
    }
  } else {
    return $node;
  }
};

_flatten = function($list) {
  var $a, $item, _i, _len;
  if ($list == null) {
    return [];
  }
  $a = [];
  for (_i = 0, _len = $list.length; _i < _len; _i++) {
    $item = $list[_i];
    if (Array.isArray($item)) {
      $a = $a.concat(_flatten($item));
    } else {
      $a.push($item);
    }
  }
  return $a;
};

_sprintf = function($fmt, $list) {
  var $count, _foreach;
  $count = 0;
  _foreach = function($match, $pct, $just, $sign, $pad, $width, $prec, $spec, $ofset, $string) {
    var $value;
    if ($pad == null) {
      $pad = ' ';
    }
    $value = String($list[$count++]);
    switch ($spec) {
      case '%':
        return '%';
      case 's':
        if ($width != null) {
          $width = parseInt($width, 10);
          if ($value.length < $width) {
            if ($just != null) {
              return Array($width - $value.length + 1).join($pad) + $value;
            } else {
              return $value + Array($width - $value.length + 1).join($pad);
            }
          }
        }
        return $value;
      case 'd':
        if ($width != null) {
          $width = parseInt($width, 10);
          if ($value.length < $width) {
            if ($just != null) {
              return $value + Array($width - $value.length + 1).join($pad);
            } else {
              return Array($width - $value.length + 1).join($pad) + $value;
            }
          }
        }
        return $value;
    }
  };
  return $fmt.replace(PRINTF, _foreach);
};

_format = function($image) {
  var $count, $head, $out;
  if ($image == null) {
    $image = [];
  }
  $out = '';
  $count = 1;
  while ($image.length > 0) {
    $head = $image.shift();
    if (isNaN($head)) {
      switch ($head) {
        case ',':
          $count = 1;
          break;
        case 'D':
          $out += $count > 1 ? '%' + $count + 'd' : '%d';
          $count = 1;
          break;
        case 'A':
          $out += $count > 1 ? '%' + $count + 's' : '%s';
          $count = 1;
          break;
        case 'X':
          $out += Array($count + 1).join(' ');
          $count = 1;
          break;
        case '(':
          $out += Array($count + 1).join(_format($image));
          $count = 1;
          break;
        case ')':
          return $out;
        default:
          $out += $head.slice(1, -1);
          $count = 1;
      }
    } else {
      $count = $head;
    }
  }
  return $out;
};

_pad = function($value, $len, $pad) {
  var $right;
  if ($pad == null) {
    $pad = ' ';
  }
  $right = !isNaN($value);
  $value = String($value);
  if ($right) {
    if ($value.length < $len) {
      return Array($len - $value.length + 1, $pad) + $value;
    } else {
      return $value.substr(0, $len);
    }
  } else {
    if ($value.length < $len) {
      return $value + Array($len - $value.length + 1, $pad);
    } else {
      return $value.substr(0, $len);
    }
  }
};

_mark = function($name) {
  return _mrk[$name] = new Date();
};

_elapsed_time = function($point1, $point2) {
  if (_mrk[$point1] == null) {
    return 0;
  }
  if (_mrk[$point2] == null) {
    _mrk[$point2] = new Date();
  }
  return _mrk[$point2] - _mrk[$point1];
};

Operator = (function() {
  function Operator(left, right) {
    this.left = left;
    this.right = right;
  }

  return Operator;

})();

BuiltIn = (function() {
  function BuiltIn($0, $1, $2) {
    this.$0 = $0;
    this.$1 = $1;
    this.$2 = $2;
  }

  BuiltIn.prototype.toString = function() {
    return "" + (this.constructor.name.toUpperCase()) + "(" + this.$0 + ")";
  };

  return BuiltIn;

})();

Keyword = (function() {
  function Keyword() {}

  Keyword.prototype.type = PHASE_EXEC;

  Keyword.prototype["eval"] = function() {
    return false;
  };

  return Keyword;

})();

Console = (function(_super) {
  __extends(Console, _super);

  function Console() {
    this.commandHandle = __bind(this.commandHandle, this);
    _ref1 = Console.__super__.constructor.apply(this, arguments);
    return _ref1;
  }

  Console.prototype.mode = MODE_REPL;

  Console.prototype.commandHandle = function($line) {
    var $e, $item, $ix, $name, _i, _j, _len, _len1, _ref2, _ref3;
    switch (this.mode) {
      case MODE_RUN:
        $line = $line.split('\n')[0];
        _ref2 = $line.split(",");
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          $item = _ref2[_i];
          this.buffer.push(isNaN($item) ? String($item) : Number($item));
        }
        if (this.buffer.length < this.vars.length) {
          this.continuedPrompt = true;
        } else {
          _ref3 = this.vars;
          for ($ix = _j = 0, _len1 = _ref3.length; _j < _len1; $ix = ++_j) {
            $name = _ref3[$ix];
            _var[$name] = this.buffer[$ix];
          }
          this.continuedPrompt = false;
          katra.command.run(false);
          return true;
        }
        break;
      case MODE_REPL:
        try {
          return katra[_use].parse($line);
        } catch (_error) {
          $e = _error;
          return this.debug($e);
        }
    }
  };

  return Console;

})(rte.Console);

_con = new Console;

_fs = new rte.FileSystem;

katra = {
  parse: function($code) {
    return katra[_use].parse($code);
  },
  command: {
    cls: function() {
      return _con.clear();
    },
    del: function($start, $end) {
      var $lineno, _i, _results;
      if ($end == null) {
        $end = $start;
      }
      _results = [];
      for ($lineno = _i = $start; $start <= $end ? _i < $end : _i > $end; $lineno = $start <= $end ? ++_i : --_i) {
        if (_prg[$lineno] != null) {
          _results.push(delete _prg[$lineno]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    get: function($file) {
      _init(true);
      return _fs.readFile($file, function($err, $data) {
        if ($err != null) {
          return _con.println($err);
        } else {
          return katra[_use].parse($data);
        }
      });
    },
    list: function($start, $end) {
      var $code, $lineno, $lines, $statement, _i, _len, _ref2, _results;
      if ($end == null) {
        $end = $start;
      }
      $lines = [];
      for ($lineno in _prg) {
        $statement = _prg[$lineno];
        while ($lineno.length < 5) {
          $lineno = '0' + $lineno;
        }
        $lines.push([$lineno, $statement]);
      }
      $lines.sort();
      _results = [];
      for (_i = 0, _len = $lines.length; _i < _len; _i++) {
        _ref2 = $lines[_i], $lineno = _ref2[0], $statement = _ref2[1];
        $lineno = $statement.lineno;
        $code = $statement.code;
        if ($start != null) {
          if ($lineno >= $start && $lineno <= $end) {
            _results.push(_con.println($lineno + ' ' + $code));
          } else {
            _results.push(void 0);
          }
        } else {
          _results.push(_con.println($lineno + ' ' + $code));
        }
      }
      return _results;
    },
    purge: function($file) {
      return _fs["delete"]($file, function($err) {
        if ($err != null) {
          return _con.println($err);
        }
      });
    },
    quit: function() {
      return typeof process !== "undefined" && process !== null ? process.exit() : void 0;
    },
    run: function($wait) {
      var $code, $e, $lineno, $statement, _ref2;
      if ($wait == null) {
        _init(false);
        _con.mode = MODE_RUN;
        $wait = false;
        _lin = [];
        for ($lineno in _prg) {
          $statement = _prg[$lineno];
          _xrf[$lineno] = _lin.length;
          while ($lineno.length < 5) {
            $lineno = '0' + $lineno;
          }
          _lin.push([$lineno, $statement]);
          if ($statement.code.type === PHASE_SCAN) {
            $statement.code["eval"]();
          }
        }
        _lin.sort();
      }
      try {
        while (!(_eop || $wait)) {
          _ref2 = _lin[_pc++], $lineno = _ref2[0], $statement = _ref2[1];
          $code = $statement.code;
          if ($statement.code.type === PHASE_EXEC) {
            if (_dbg) {
              _con.debug($lineno + ' ' + $code.toString());
            }
            $wait = $code["eval"]();
          }
          if (_pc >= _lin.length) {
            _eop = true;
          }
        }
      } catch (_error) {
        $e = _error;
        _con.println($e);
        $wait = false;
      }
      if (!$wait) {
        _con.mode = MODE_REPL;
        return _con.println('DONE');
      }
    },
    save: function($file) {
      var $code, $lineno, $lines, $statement, $text, _i, _len, _ref2;
      $lines = [];
      $text = '';
      for ($lineno in _prg) {
        $statement = _prg[$lineno];
        $lines.push([$lineno, $statement.code]);
      }
      $lines.sort();
      for (_i = 0, _len = $lines.length; _i < _len; _i++) {
        _ref2 = $lines[_i], $lineno = _ref2[0], $code = _ref2[1];
        $text += $lineno + ' ' + $code + '\n';
      }
      return _fs.writeFile($file, $text.slice(0, -1), function($err) {
        if ($err != null) {
          return _con.println($err);
        }
      });
    },
    scr: function() {
      return _init(true);
    },
    trace: function($flag) {
      return _dbg = $flag;
    }
  },
  bnf: {
    parse: function($code) {
      var $index, $line, kc, _i, _len;
      kc = typeof window !== "undefined" && window !== null ? window.kc : require("./kc.bnf");
      if ($code.charCodeAt(0) === BOM) {
        $code = $code.slice(1);
      }
      $code = ($code + '\n').replace(/\r/g, '\n').replace(/\n+/g, '\n').split('\n');
      for ($index = _i = 0, _len = $code.length; _i < _len; $index = ++_i) {
        $line = $code[$index];
        if (/\d+\s+IF\s/i.test($line) || /^\s*IF\s/i.test($line)) {
          $code[$index] = $line.replace(/\=/g, '==').replace(/\<\=\=/g, '<=').replace(/\>\=\=/g, '>=');
        }
        if (/\d+\s+PRINT\s/i.test($line) || /^\s*PRINT\s/i.test($line)) {
          $code[$index] = $line.replace(/(\"[^"]*\")([^;,])/ig, "$1;$2").replace(/([^;,])(\"[^"]*\")/ig, "$1;$2").replace(/(PRINT\s+)\;/i, "$1");
        }
      }
      return kc.parse($code.join('\n'));
    }
  },
  peg: {
    "eval": _eval,
    parse: function($code) {
      var kc;
      kc = typeof window !== "undefined" && window !== null ? window.kc : require("./kc.peg");
      return kc.parse($code);
    },
    merge: function($head, $tail, $item) {
      var $each, list, _i, _len;
      if ($item == null) {
        $item = 0;
      }
      list = [$head];
      for (_i = 0, _len = $tail.length; _i < _len; _i++) {
        $each = $tail[_i];
        list.push($each[$item]);
      }
      return list;
    },
    expression: function($head, $tail) {
      var $each, $node, _i, _len;
      if ($tail == null) {
        $tail = [];
      }
      $node = $head;
      for (_i = 0, _len = $tail.length; _i < _len; _i++) {
        $each = $tail[_i];
        $node = {
          type: 2,
          op: $each[0],
          left: $node,
          right: $each[1]
        };
      }
      return $node;
    },
    statement: function($code, $lineno) {
      if ($lineno != null) {
        return _prg[$lineno] = {
          lineno: $lineno,
          code: $code
        };
      } else {
        return $code != null ? typeof $code["eval"] === "function" ? $code["eval"]() : void 0 : void 0;
      }
    }
  },
  Statement: Statement = (function() {
    function Statement($code, $lineno) {
      if ($lineno != null) {
        _prg[$lineno] = {
          lineno: $lineno,
          code: $code
        };
      } else {
        if ($code != null) {
          if (typeof $code["eval"] === "function") {
            $code["eval"]();
          }
        }
      }
    }

    return Statement;

  })(),
  Zer: {
    "eval": function() {
      return 0;
    },
    toString: function() {
      return 'ZER';
    }
  },
  Con: {
    "eval": function() {
      return 1;
    },
    toString: function() {
      return 'CON';
    }
  },
  Semic: {
    "eval": function() {
      return '';
    },
    toString: function() {
      return ';';
    }
  },
  Comma: {
    "eval": function() {
      return '    ';
    },
    toString: function() {
      return ',';
    }
  },
  Const: Const = (function() {
    function Const(value) {
      this.value = value;
      this.is_string = 'string' === typeof this.value ? true : false;
      if (this.is_string) {
        if (this.value.charAt(0) === '"') {
          this.value = this.value.slice(1, -1);
        }
      }
    }

    Const.prototype.value = function() {
      return this.value;
    };

    Const.prototype["eval"] = function() {
      return this.value;
    };

    Const.prototype.toString = function() {
      if (this.is_string) {
        return "\"" + this.value + "\"";
      } else {
        return "" + this.value;
      }
    };

    return Const;

  })(),
  Var: Var = (function() {
    function Var(name, $delim, $dims) {
      this.name = name;
      this.is_string = /\$$/.test(this.name);
      if ($delim != null) {
        this.is_array = true;
        this.dims = _flatten($dims);
        this.dim1 = this.dims[0];
        this.dim2 = this.dims[1];
      } else {
        this.is_array = false;
      }
    }

    Var.prototype["let"] = function($value) {
      var $dim1, $dim2, $end, $len, $start, $str;
      if (this.is_string) {
        if (this.dim2 != null) {
          $start = this.dim1["eval"]() - 1;
          $end = this.dim2["eval"]();
          if ($end < $start) {
            throw 'Invalid String index: ' + this.toString();
          }
          $len = $end - $start;
          $value = $value.substr(0, $len);
          $value = _pad($value, $len);
          $str = _var[this.name];
          return _var[this.name] = $str.substr(0, $start) + $value + $str.substr($end);
        } else if (this.dim1 != null) {
          $start = this.dim1["eval"]() - 1;
          $str = _var[this.name];
          return _var[this.name] = $str.substr(0, $start) + $value + $str.substr($start + $value.length);
        } else {
          $len = _var[this.name].length;
          if ($value.length < $len) {
            $value += Array($len - $value.length + 1).join(' ');
          }
          return _var[this.name] = $value;
        }
      } else if (this.dim2 != null) {
        $dim1 = this.dim1["eval"]();
        $dim2 = this.dim2["eval"]();
        return _var[this.name][$dim1][$dim2] = $value;
      } else if (this.dim1 != null) {
        $dim1 = this.dim1["eval"]();
        return _var[this.name][$dim1] = $value;
      } else {
        return _var[this.name] = $value;
      }
    };

    Var.prototype["eval"] = function() {
      var $dim1, $dim2, $end, $start;
      if (this.is_string) {
        if (this.dim2 != null) {
          $start = this.dim1["eval"]() - 1;
          $end = this.dim2["eval"]();
          if ($end < $start) {
            throw 'Invalid String index: ' + this.toString();
          }
          return _var[this.name].slice($start, $end);
        } else if (this.dim1 != null) {
          $start = this.dim1["eval"]() - 1;
          return _var[this.name].slice($start);
        } else {
          return _var[this.name];
        }
      } else if (this.dim2 != null) {
        $dim1 = this.dim1["eval"]();
        $dim2 = this.dim2["eval"]();
        return _var[this.name][$dim1][$dim2];
      } else if (this.dim1 != null) {
        $dim1 = this.dim1["eval"]();
        return _var[this.name][$dim1];
      } else {
        return _var[this.name];
      }
    };

    Var.prototype.toString = function() {
      if (this.is_array) {
        return "" + this.name + "[" + (this.dims.join(',')) + "]";
      } else {
        return this.name;
      }
    };

    return Var;

  })(),
  Base: Base = (function(_super) {
    __extends(Base, _super);

    function Base(base) {
      this.base = base;
    }

    Base.prototype["eval"] = function() {
      _ofs = this.base;
      return false;
    };

    Base.prototype.toString = function() {
      return "BASE " + this.base;
    };

    return Base;

  })(Keyword),
  Data: Data = (function(_super) {
    __extends(Data, _super);

    Data.prototype.type = PHASE_SCAN;

    function Data($data) {
      this.data = _flatten($data);
    }

    Data.prototype["eval"] = function() {
      if (_dat === null) {
        _dat = [];
      }
      _dat = _dat.concat(this.data);
      return false;
    };

    Data.prototype.toString = function() {
      return "DATA " + (this.data.join(', '));
    };

    return Data;

  })(Keyword),
  Def: Def = (function(_super) {
    __extends(Def, _super);

    Def.prototype.type = PHASE_SCAN;

    function Def(name, par, body) {
      this.name = name;
      this.par = par;
      this.body = body;
    }

    Def.prototype["eval"] = function() {
      var _this = this;
      _fn[this.name] = function($par) {
        var $ret, $tmp;
        $tmp = _var[_this.par];
        _var[_this.par] = $par;
        $ret = _this.body["eval"]();
        _var[_this.par] = $tmp;
        return $ret;
      };
      return false;
    };

    Def.prototype.toString = function() {
      return "DEF " + this.name + "(" + this.par + ") = " + this.body;
    };

    return Def;

  })(Keyword),
  Dim: Dim = (function(_super) {
    __extends(Dim, _super);

    Dim.prototype.type = PHASE_SCAN;

    function Dim($vars) {
      this.vars = _flatten($vars);
    }

    Dim.prototype["eval"] = function() {
      var $var, _i, _len, _ref2;
      _ref2 = this.vars;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        $var = _ref2[_i];
        if (/\$$/.test($var.name)) {
          _var[$var.name] = Array($var.dims[0] + 1).join(' ');
        } else {
          _var[$var.name] = _dim.apply(null, [0].concat(__slice.call($var.dims)));
        }
      }
      return false;
    };

    Dim.prototype.toString = function() {
      return "DIM " + (this.vars.join(', '));
    };

    return Dim;

  })(Keyword),
  End: End = (function(_super) {
    __extends(End, _super);

    function End() {
      _ref2 = End.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    End.prototype["eval"] = function() {
      _eop = true;
      return false;
    };

    End.prototype.toString = function() {
      return "END";
    };

    return End;

  })(Keyword),
  For: For = (function(_super) {
    __extends(For, _super);

    function For(_var1, start, end, step) {
      this["var"] = _var1;
      this.start = start;
      this.end = end;
      this.step = step != null ? step : new Const(1);
    }

    For.prototype["eval"] = function() {
      _var[this["var"]] = this.start["eval"]();
      _stk.push({
        id: FOR,
        pc: _pc,
        name: this["var"],
        end: this.end,
        step: this.step
      });
      return false;
    };

    For.prototype.toString = function() {
      if (this.step === 1) {
        return "FOR " + this["var"] + " = " + this.start + " TO " + this.end;
      } else {
        return "FOR " + this["var"] + " = " + this.start + " TO " + this.end + " STEP " + this.step;
      }
    };

    return For;

  })(Keyword),
  Goto: Goto = (function(_super) {
    __extends(Goto, _super);

    function Goto(lineno, $of) {
      this.lineno = lineno;
      this.of = _flatten($of);
    }

    Goto.prototype["eval"] = function() {
      var $index;
      if (this.of.length > 0) {
        $index = this.lineno["eval"]() - 1;
        if (this.of[$index] != null) {
          _pc = _xrf[this.of[$index]];
        }
      } else {
        _pc = _xrf[this.lineno];
      }
      return false;
    };

    Goto.prototype.toString = function() {
      if (this.of != null) {
        return "GOTO " + this.lineno + " OF " + (this.of.join(','));
      } else {
        return "GOTO " + this.lineno;
      }
    };

    return Goto;

  })(Keyword),
  Gosub: Gosub = (function(_super) {
    __extends(Gosub, _super);

    function Gosub(lineno) {
      this.lineno = lineno;
    }

    Gosub.prototype["eval"] = function() {
      _stk.push({
        id: GOSUB,
        pc: _pc
      });
      _pc = _xrf[this.lineno];
      return false;
    };

    Gosub.prototype.toString = function() {
      return "GOSUB " + this.lineno;
    };

    return Gosub;

  })(Keyword),
  If: If = (function(_super) {
    __extends(If, _super);

    function If(cond, lineno) {
      this.cond = cond;
      this.lineno = lineno;
    }

    If.prototype["eval"] = function() {
      if (this.cond["eval"]()) {
        _pc = _xrf[this.lineno];
      }
      return false;
    };

    If.prototype.toString = function() {
      return "IF " + this.cond + " THEN " + this.lineno;
    };

    return If;

  })(Keyword),
  Image: Image = (function(_super) {
    __extends(Image, _super);

    function Image($format) {
      if ($format == null) {
        $format = [];
      }
      this.source = _flatten($format);
      this.format = _format(this.source);
    }

    Image.prototype["eval"] = function() {
      return false;
    };

    Image.prototype.toString = function() {
      return "IMAGE " + (this.source.join(''));
    };

    return Image;

  })(Keyword),
  Input: Input = (function(_super) {
    __extends(Input, _super);

    function Input($vars, prompt) {
      this.prompt = prompt;
      this.vars = _flatten($vars);
    }

    Input.prototype["eval"] = function() {
      _con.input(this.prompt, this.vars);
      return true;
    };

    Input.prototype.toString = function() {
      if (this.prompt != null) {
        return "INPUT " + this.prompt + ", " + (this.vars.join(','));
      } else {
        return "INPUT " + (this.vars.join(','));
      }
    };

    return Input;

  })(Keyword),
  Let: Let = (function(_super) {
    __extends(Let, _super);

    function Let($vars, value) {
      var $var, _i, _len, _ref3;
      this.value = value;
      this.vars = [];
      _ref3 = _flatten($vars);
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $var = _ref3[_i];
        if ('string' === typeof $var) {
          this.vars.push(new Var($var));
        } else {
          this.vars.push($var);
        }
      }
    }

    Let.prototype["eval"] = function() {
      var $value, $var, _i, _len, _ref3;
      $value = _eval(this.value);
      _ref3 = this.vars;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $var = _ref3[_i];
        $var["let"]($value);
      }
      return false;
    };

    Let.prototype.toString = function() {
      var $s, $var, _i, _len, _ref3;
      $s = '';
      _ref3 = this.vars;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $var = _ref3[_i];
        $s += $var + ' = ';
      }
      return "LET " + $s + this.value;
    };

    return Let;

  })(Keyword),
  Mat: Mat = (function(_super) {
    __extends(Mat, _super);

    function Mat(_var1, value) {
      this["var"] = _var1;
      this.value = value;
    }

    Mat.prototype["eval"] = function() {
      var $i, $j, $value;
      $value = this.value["eval"]();
      if (_var[this["var"]] != null) {
        $i = _var[this["var"]].length;
        $j = _var[this["var"]][_ofs].length;
        _var[this["var"]] = _dim($value, $i, $j);
      } else {
        _var[this["var"]] = _dim($value, 10);
      }
      return false;
    };

    Mat.prototype.toString = function() {
      return "MAT " + this["var"] + " = " + this.value;
    };

    return Mat;

  })(Keyword),
  Next: Next = (function(_super) {
    __extends(Next, _super);

    function Next(_var1) {
      this["var"] = _var1;
    }

    Next.prototype["eval"] = function() {
      var $counter, $frame, $name, $step;
      $frame = _stk[_stk.length - 1];
      if ($frame.id !== FOR) {
        throw "Next without for";
      }
      $name = this["var"].name;
      if ($frame.name !== $name) {
        throw "Mismatched For/Next " + $name;
      }
      $step = $frame.step["eval"] != null ? $frame.step["eval"]() : $frame.step;
      $counter = this["var"]["eval"]() + $step;
      this["var"]["let"]($counter);
      if ($step < 0) {
        if ($counter < $frame.end["eval"]()) {
          _stk.pop();
        } else {
          _pc = $frame.pc;
        }
      } else {
        if ($counter > $frame.end["eval"]()) {
          _stk.pop();
        } else {
          _pc = $frame.pc;
        }
      }
      return false;
    };

    Next.prototype.toString = function() {
      return "NEXT " + this["var"];
    };

    return Next;

  })(Keyword),
  Print: Print = (function(_super) {
    __extends(Print, _super);

    function Print() {
      var $items;
      $items = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.items = _flatten([$items]);
    }

    Print.prototype["eval"] = function() {
      var $item, $str, _i, _len, _ref3;
      $str = '';
      _ref3 = this.items;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $item = _ref3[_i];
        $str += $item["eval"]();
      }
      if ($item === katra.Semic || $item === katra.Comma) {
        _con.print($str);
      } else {
        _con.println($str);
      }
      return false;
    };

    Print.prototype.toString = function() {
      var $item, $str, _i, _len, _ref3;
      $str = '';
      _ref3 = this.items;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $item = _ref3[_i];
        $str += $item.toString();
      }
      return "PRINT " + $str;
    };

    return Print;

  })(Keyword),
  Using: Using = (function(_super) {
    __extends(Using, _super);

    function Using() {
      var $items, lineno;
      lineno = arguments[0], $items = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this.lineno = lineno;
      this.items = _flatten($items);
    }

    Using.prototype["eval"] = function() {
      var $args, $i, $item, $lineno, $statement, _i, _len, _ref3, _ref4;
      $i = _xrf[this.lineno];
      _ref3 = _lin[$i], $lineno = _ref3[0], $statement = _ref3[1];
      $args = [];
      _ref4 = this.items;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        $item = _ref4[_i];
        $args.push($item["eval"]());
      }
      if ($item === katra.Semic || $item === katra.Comma) {
        _con.print(_sprintf($statement.code.format, $args));
      } else {
        _con.println(_sprintf($statement.code.format, $args));
      }
      return false;
    };

    Using.prototype.toString = function() {
      var $item, $str, _i, _len, _ref3;
      if (this.items.length === 0) {
        return "PRINT USING " + this.lineno;
      } else {
        $str = '';
        _ref3 = this.items;
        for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
          $item = _ref3[_i];
          $str += $item.toString() + ',';
        }
        $str = $str.slice(0, -1);
        return "PRINT USING " + this.lineno + ";" + $str;
      }
    };

    return Using;

  })(Keyword),
  Randomize: Randomize = (function(_super) {
    __extends(Randomize, _super);

    function Randomize() {}

    Randomize.prototype["eval"] = function() {
      return false;
    };

    Randomize.prototype.toString = function() {
      return "RANDOMIZE";
    };

    return Randomize;

  })(Keyword),
  Read: Read = (function(_super) {
    __extends(Read, _super);

    function Read($vars) {
      this.vars = _flatten($vars);
    }

    Read.prototype["eval"] = function() {
      var $var, _i, _len, _ref3;
      _ref3 = this.vars;
      for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
        $var = _ref3[_i];
        if (_dp < _dat.length) {
          $var["let"](_dat[_dp++].value);
        } else {
          $var["let"](void 0);
        }
      }
      return false;
    };

    Read.prototype.toString = function() {
      return "READ " + (this.vars.join(','));
    };

    return Read;

  })(Keyword),
  Restore: Restore = (function(_super) {
    __extends(Restore, _super);

    function Restore() {
      _ref3 = Restore.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    Restore.prototype["eval"] = function() {
      _dp = 0;
      return false;
    };

    Restore.prototype.toString = function() {
      return "RESTORE";
    };

    return Restore;

  })(Keyword),
  Return: Return = (function(_super) {
    __extends(Return, _super);

    function Return() {}

    Return.prototype["eval"] = function() {
      var $frame;
      $frame = _stk.pop();
      while ($frame.id !== GOSUB) {
        $frame = _stk.pop();
      }
      _pc = $frame.pc;
      return false;
    };

    Return.prototype.toString = function() {
      return "RETURN";
    };

    return Return;

  })(Keyword),
  Rem: Rem = (function(_super) {
    __extends(Rem, _super);

    function Rem($text) {
      this.text = $text.replace(/^REM/i, '');
    }

    Rem.prototype["eval"] = function() {
      return false;
    };

    Rem.prototype.toString = function() {
      return "REM" + this.text;
    };

    return Rem;

  })(Keyword),
  Stop: Stop = (function(_super) {
    __extends(Stop, _super);

    function Stop() {}

    Stop.prototype["eval"] = function() {
      _eop = true;
      return false;
    };

    Stop.prototype.toString = function() {
      return "STOP";
    };

    return Stop;

  })(Keyword),
  Add: Add = (function(_super) {
    __extends(Add, _super);

    function Add() {
      _ref4 = Add.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    Add.prototype["eval"] = function() {
      return this.left["eval"]() + this.right["eval"]();
    };

    Add.prototype.toString = function() {
      return "" + this.left + " + " + this.right;
    };

    return Add;

  })(Operator),
  Sub: Sub = (function(_super) {
    __extends(Sub, _super);

    function Sub() {
      _ref5 = Sub.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    Sub.prototype["eval"] = function() {
      return this.left["eval"]() - this.right["eval"]();
    };

    Sub.prototype.toString = function() {
      return "" + this.left + " - " + this.right;
    };

    return Sub;

  })(Operator),
  Mul: Mul = (function(_super) {
    __extends(Mul, _super);

    function Mul() {
      _ref6 = Mul.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    Mul.prototype["eval"] = function() {
      return this.left["eval"]() * this.right["eval"]();
    };

    Mul.prototype.toString = function() {
      return "" + this.left + " * " + this.right;
    };

    return Mul;

  })(Operator),
  Div: Div = (function(_super) {
    __extends(Div, _super);

    function Div() {
      _ref7 = Div.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    Div.prototype["eval"] = function() {
      return this.left["eval"]() / this.right["eval"]();
    };

    Div.prototype.toString = function() {
      return "" + this.left + " / " + this.right;
    };

    return Div;

  })(Operator),
  Pow: Pow = (function(_super) {
    __extends(Pow, _super);

    function Pow() {
      _ref8 = Pow.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Pow.prototype["eval"] = function() {
      return Math.pow(this.left["eval"](), this.right["eval"]());
    };

    Pow.prototype.toString = function() {
      return "" + this.left + " ^ " + this.right;
    };

    return Pow;

  })(Operator),
  OR: OR = (function(_super) {
    __extends(OR, _super);

    function OR() {
      _ref9 = OR.__super__.constructor.apply(this, arguments);
      return _ref9;
    }

    OR.prototype["eval"] = function() {
      return this.left["eval"]() || this.right["eval"]();
    };

    OR.prototype.toString = function() {
      return "" + this.left + " OR " + this.right;
    };

    return OR;

  })(Operator),
  AND: AND = (function(_super) {
    __extends(AND, _super);

    function AND() {
      _ref10 = AND.__super__.constructor.apply(this, arguments);
      return _ref10;
    }

    AND.prototype["eval"] = function() {
      return this.left["eval"]() && this.right["eval"]();
    };

    AND.prototype.toString = function() {
      return "" + this.left + " AND " + this.right;
    };

    return AND;

  })(Operator),
  NOT: NOT = (function(_super) {
    __extends(NOT, _super);

    function NOT() {
      _ref11 = NOT.__super__.constructor.apply(this, arguments);
      return _ref11;
    }

    NOT.prototype["eval"] = function() {
      return !this.left["eval"]();
    };

    NOT.prototype.toString = function() {
      return "NOT " + this.left;
    };

    return NOT;

  })(Operator),
  LT: LT = (function(_super) {
    __extends(LT, _super);

    function LT() {
      _ref12 = LT.__super__.constructor.apply(this, arguments);
      return _ref12;
    }

    LT.prototype["eval"] = function() {
      return this.left["eval"]() < this.right["eval"]();
    };

    LT.prototype.toString = function() {
      return "" + this.left + " < " + this.right;
    };

    return LT;

  })(Operator),
  GT: GT = (function(_super) {
    __extends(GT, _super);

    function GT() {
      _ref13 = GT.__super__.constructor.apply(this, arguments);
      return _ref13;
    }

    GT.prototype["eval"] = function() {
      return this.left["eval"]() > this.right["eval"]();
    };

    GT.prototype.toString = function() {
      return "" + this.left + " > " + this.right;
    };

    return GT;

  })(Operator),
  LE: LE = (function(_super) {
    __extends(LE, _super);

    function LE() {
      _ref14 = LE.__super__.constructor.apply(this, arguments);
      return _ref14;
    }

    LE.prototype["eval"] = function() {
      return this.left["eval"]() <= this.right["eval"]();
    };

    LE.prototype.toString = function() {
      return "" + this.left + " <= " + this.right;
    };

    return LE;

  })(Operator),
  GE: GE = (function(_super) {
    __extends(GE, _super);

    function GE() {
      _ref15 = GE.__super__.constructor.apply(this, arguments);
      return _ref15;
    }

    GE.prototype["eval"] = function() {
      return this.left["eval"]() >= this.right["eval"]();
    };

    GE.prototype.toString = function() {
      return "" + this.left + " >= " + this.right;
    };

    return GE;

  })(Operator),
  EQ: EQ = (function(_super) {
    __extends(EQ, _super);

    function EQ() {
      _ref16 = EQ.__super__.constructor.apply(this, arguments);
      return _ref16;
    }

    EQ.prototype["eval"] = function() {
      if (this.left["eval"]() === this.right["eval"]()) {
        return true;
      } else {
        return false;
      }
    };

    EQ.prototype.toString = function() {
      return "" + this.left + " = " + this.right;
    };

    return EQ;

  })(Operator),
  NE: NE = (function(_super) {
    __extends(NE, _super);

    function NE() {
      _ref17 = NE.__super__.constructor.apply(this, arguments);
      return _ref17;
    }

    NE.prototype["eval"] = function() {
      if (this.left["eval"]() !== this.right["eval"]()) {
        return true;
      } else {
        return false;
      }
    };

    NE.prototype.toString = function() {
      return "" + this.left + " <> " + this.right;
    };

    return NE;

  })(Operator),
  FN: FN = (function() {
    function FN(name, parm) {
      this.name = name;
      this.parm = parm;
    }

    FN.prototype["eval"] = function() {
      return _fn[this.name](this.parm["eval"]());
    };

    FN.prototype.toString = function() {
      return "" + this.name + "(" + this.parm + ")";
    };

    return FN;

  })(),
  ABS: ABS = (function(_super) {
    __extends(ABS, _super);

    function ABS() {
      _ref18 = ABS.__super__.constructor.apply(this, arguments);
      return _ref18;
    }

    ABS.prototype["eval"] = function() {
      return Math.abs(this.$0["eval"]());
    };

    return ABS;

  })(BuiltIn),
  ATN: ATN = (function(_super) {
    __extends(ATN, _super);

    function ATN() {
      _ref19 = ATN.__super__.constructor.apply(this, arguments);
      return _ref19;
    }

    ATN.prototype["eval"] = function() {
      return Math.atn(this.$0["eval"]());
    };

    return ATN;

  })(BuiltIn),
  COS: COS = (function(_super) {
    __extends(COS, _super);

    function COS() {
      _ref20 = COS.__super__.constructor.apply(this, arguments);
      return _ref20;
    }

    COS.prototype["eval"] = function() {
      return Math.cos(this.$0["eval"]());
    };

    return COS;

  })(BuiltIn),
  EXP: EXP = (function(_super) {
    __extends(EXP, _super);

    function EXP() {
      _ref21 = EXP.__super__.constructor.apply(this, arguments);
      return _ref21;
    }

    EXP.prototype["eval"] = function() {
      return Math.exp(this.$0["eval"]());
    };

    return EXP;

  })(BuiltIn),
  INT: INT = (function(_super) {
    __extends(INT, _super);

    function INT() {
      _ref22 = INT.__super__.constructor.apply(this, arguments);
      return _ref22;
    }

    INT.prototype["eval"] = function() {
      return Math.floor(this.$0["eval"]());
    };

    return INT;

  })(BuiltIn),
  LEN: LEN = (function(_super) {
    __extends(LEN, _super);

    function LEN() {
      _ref23 = LEN.__super__.constructor.apply(this, arguments);
      return _ref23;
    }

    LEN.prototype["eval"] = function() {
      return this.$0.length;
    };

    return LEN;

  })(BuiltIn),
  LIN: LIN = (function(_super) {
    __extends(LIN, _super);

    function LIN() {
      _ref24 = LIN.__super__.constructor.apply(this, arguments);
      return _ref24;
    }

    LIN.prototype["eval"] = function() {
      return '\n';
    };

    return LIN;

  })(BuiltIn),
  LOG: LOG = (function(_super) {
    __extends(LOG, _super);

    function LOG() {
      _ref25 = LOG.__super__.constructor.apply(this, arguments);
      return _ref25;
    }

    LOG.prototype["eval"] = function() {
      return Math.log(this.$0["eval"]());
    };

    return LOG;

  })(BuiltIn),
  RND: RND = (function(_super) {
    __extends(RND, _super);

    function RND() {
      _ref26 = RND.__super__.constructor.apply(this, arguments);
      return _ref26;
    }

    RND.prototype["eval"] = function() {
      return Math.random();
    };

    return RND;

  })(BuiltIn),
  SGN: SGN = (function(_super) {
    __extends(SGN, _super);

    function SGN() {
      _ref27 = SGN.__super__.constructor.apply(this, arguments);
      return _ref27;
    }

    SGN.prototype["eval"] = function() {
      var $0;
      $0 = this.$0["eval"];
      if ($0 < 0) {
        return -1;
      } else if ($0 > 0) {
        return 1;
      } else {
        return 0;
      }
    };

    return SGN;

  })(BuiltIn),
  SIN: SIN = (function(_super) {
    __extends(SIN, _super);

    function SIN() {
      _ref28 = SIN.__super__.constructor.apply(this, arguments);
      return _ref28;
    }

    SIN.prototype["eval"] = function() {
      return Math.sin(this.$0["eval"]());
    };

    return SIN;

  })(BuiltIn),
  SPA: SPA = (function(_super) {
    __extends(SPA, _super);

    function SPA() {
      _ref29 = SPA.__super__.constructor.apply(this, arguments);
      return _ref29;
    }

    SPA.prototype["eval"] = function() {
      return Array(this.$0["eval"]()).join(" ");
    };

    return SPA;

  })(BuiltIn),
  SQR: SQR = (function(_super) {
    __extends(SQR, _super);

    function SQR() {
      _ref30 = SQR.__super__.constructor.apply(this, arguments);
      return _ref30;
    }

    SQR.prototype["eval"] = function() {
      return Math.sqrt(this.$0["eval"]());
    };

    return SQR;

  })(BuiltIn),
  SUBSTR: SUBSTR = (function(_super) {
    __extends(SUBSTR, _super);

    function SUBSTR() {
      _ref31 = SUBSTR.__super__.constructor.apply(this, arguments);
      return _ref31;
    }

    SUBSTR.prototype["eval"] = function() {
      return this.$0["eval"]().substr(this.$1["eval"](), this.$2["eval"]());
    };

    SUBSTR.prototype.toString = function() {
      return "SUBSTR(" + this.$0 + ", " + this.$1 + ", " + this.$2 + ")";
    };

    return SUBSTR;

  })(BuiltIn),
  TAB: TAB = (function(_super) {
    __extends(TAB, _super);

    function TAB() {
      _ref32 = TAB.__super__.constructor.apply(this, arguments);
      return _ref32;
    }

    TAB.prototype["eval"] = function() {
      return Array(this.$0["eval"]()).join("    ");
    };

    return TAB;

  })(BuiltIn),
  TAN: TAN = (function(_super) {
    __extends(TAN, _super);

    function TAN() {
      _ref33 = TAN.__super__.constructor.apply(this, arguments);
      return _ref33;
    }

    TAN.prototype["eval"] = function() {
      return Math.tan(this.$0["eval"]());
    };

    return TAN;

  })(BuiltIn),
  TIM: TIM = (function(_super) {
    __extends(TIM, _super);

    function TIM() {
      _ref34 = TIM.__super__.constructor.apply(this, arguments);
      return _ref34;
    }

    TIM.prototype["eval"] = function() {
      if (this.$0["eval"]() === 0) {
        return (new Date()).getMinutes();
      } else {
        return (new Date()).getSeconds();
      }
    };

    return TIM;

  })(BuiltIn)
};

if (typeof window !== "undefined" && window !== null) {
  window.katra = katra;
} else {
  module.exports = katra;
}
